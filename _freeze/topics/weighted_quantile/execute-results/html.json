{
  "hash": "ae07885ba2543554c351d249381f5e20",
  "result": {
    "markdown": "---\ntitle: \"Weighted quantiles\"\n---\n\n::: {.cell}\n\n:::\n\n\nYou may want to summarize a distribution by quantiles (like the 10th and 90th percentile) instead of the mean. For a simple random sample, you could use the `quantile()` function. But base R does not have a canned `weighted.quantile()` function for this! Here we will write one.\n\nWrite a function that accepts three arguments\n\n- `x`, a numeric vector, such as a vector of incomes\n- `q`, a numeric value for the quantile to be estimated, such as 0.9\n- `w`, a numeric vector of sampling weights\n\nYour function will look something like this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweighted.quantile <- function(x, q, w) {\n\t# Carry out operations on x, q, w\n\t# Produce an estimate\n\treturn(estimate)\n}\n```\n:::\n\n\nAlong the way, you might follow these steps:\n\n1. Create a data frame with `x` and `w`\n     - `data.frame(x = x, w = w)`\n2. Arrange the data frame by the values of x\n     - see [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)\n3. Create a new column `cdf` for the cumulative distribution function\n     - use `cumsum()` and `sum()`\n4. Filter to the first case where `cdf > q`\n5. Return the `x` value of that case\n\n### Simulated data\n\nAs you work on your function, you might want some simple simulated data to practice with. You can generate data with the code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim <- tibble(x = runif(100, min = .2, max = .8)) |>\n  mutate(w = 1 / x)\n```\n:::\n\n\nHere is what the data will look like at each step for estimating the 10th percentile.\n\nArrange the data with lowest values of `x` at the top\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 × 2\n      x     w\n  <dbl> <dbl>\n1 0.210  4.75\n2 0.213  4.69\n3 0.217  4.61\n4 0.218  4.59\n5 0.226  4.42\n# ℹ 95 more rows\n```\n:::\n:::\n\n\nCreate a cumulative distribution function variable\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 × 3\n      x     w    cdf\n  <dbl> <dbl>  <dbl>\n1 0.210  4.75 0.0209\n2 0.213  4.69 0.0416\n3 0.217  4.61 0.0619\n4 0.218  4.59 0.0821\n5 0.226  4.42 0.102 \n# ℹ 95 more rows\n```\n:::\n:::\n\n\nFilter to rows with `cdf > q`\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 96 × 3\n      x     w   cdf\n  <dbl> <dbl> <dbl>\n1 0.226  4.42 0.102\n2 0.230  4.35 0.121\n3 0.231  4.32 0.140\n4 0.237  4.22 0.158\n5 0.242  4.13 0.177\n# ℹ 91 more rows\n```\n:::\n:::\n\n\nKeep only the first row\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 96 × 3\n      x     w   cdf\n  <dbl> <dbl> <dbl>\n1 0.226  4.42 0.102\n2 0.230  4.35 0.121\n3 0.231  4.32 0.140\n4 0.237  4.22 0.158\n5 0.242  4.13 0.177\n# ℹ 91 more rows\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n      x     w   cdf\n  <dbl> <dbl> <dbl>\n1 0.226  4.42 0.102\n```\n:::\n:::\n\n\nExtract the `x`-value of that row\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 96 × 3\n      x     w   cdf\n  <dbl> <dbl> <dbl>\n1 0.226  4.42 0.102\n2 0.230  4.35 0.121\n3 0.231  4.32 0.140\n4 0.237  4.22 0.158\n5 0.242  4.13 0.177\n# ℹ 91 more rows\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2261755\n```\n:::\n:::\n\n\n## Finished with your function?\n\nNow go back to the class exercise from last week. Replace `quantile` with your custom `weighted.quantile`, using the weight `asecwt`.\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "weighted_quantile_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}