{
  "hash": "30aae9486eba321f38b09e06a3ec6a2f",
  "result": {
    "markdown": "---\ntitle: \"Statistical Learning\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(scales)\nlibrary(rsample)\ndata <- read_dta(\"../data_raw/cps_00077.dta\")\naggregated <- data |>\n  group_by(sex)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\natus <- read_dta(\"../data_raw/atus_00014.dta\")\naggregated <- atus |>\n  filter(age >= 25 & age <= 50) |>\n  filter(marst == 1) |>\n  group_by(age, sex) |>\n  summarize(housework = weighted.mean(bls_hhact_hwork, w = wt06),\n            paidwork = weighted.mean(bls_work_working, w = wt06))\n\n# hours per week\n# annual wage and salary income\n# synthetic data\n\naggregated |>\n  mutate_if(is.labelled, as_factor) |>\n  ggplot(aes(x = age, y = housework, color = sex)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = F)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- read_dta(\"../data_raw/cps_00081.dta\")\n# What is the mean income of those who work 37 hours per week?\naggregated <- d |>\n  filter(uhrsworkly != 999) |>\n  filter(incwage > 0 & incwage < 99999998) |>\n  filter(uhrsworkly <= 60) |>\n  group_by(uhrsworkly) |>\n  summarize(\n    incwage = weighted.mean(incwage, w = asecwt),\n    num = n()\n  ) |>\n  mutate(target = uhrsworkly == 37) |>\n  rename(y = incwage, x = uhrsworkly)\n\np <- aggregated |>\n  ggplot(aes(x = x, y = y)) +\n  geom_point(aes(color = target)) +\n  scale_x_continuous(name = \"Hours Worked Per Week\") +\n  scale_y_continuous(\n    name = \"Mean Annual Wage and Salary Income\",\n    labels = label_dollar(),\n    limits = c(0,125e3)\n  ) +\n  scale_color_manual(values = c(\"darkgray\",\"blue\")) +\n  theme(legend.position = \"none\")\np\np + geom_line()\np + geom_smooth(method = \"lm\", se = F)\np + geom_smooth(method = \"gam\", se = F)\n\n# Train test split\nsplit <- aggregated |>\n  initial_split(prop = .5)\ntrain <- training(split)\ntest <- testing(split)\n\n# OLS\nfit <- lm(y ~ x, data = train)\ntest |>\n  mutate(\n    predicted = predict(fit, newdata = test),\n    error = y - predicted,\n    squared_error = error ^ 2\n  ) |>\n  summarize(\n    root_mean_squared_error = sqrt(mean(squared_error))\n  )\n\n# LOESS\nfit <- loess(y ~ x, data = train)\nfitted <- test |>\n  mutate(\n    predicted = predict(fit, newdata = test),\n    error = y - predicted,\n    squared_error = error ^ 2\n  ) \nfitted |>\n  ggplot(aes(x = x, y = predicted)) +\n  geom_line()\nfitted |>\n  summarize(\n    root_mean_squared_error = sqrt(mean(squared_error))\n  )\n\n# TREE\nfit <- rpart::rpart(y ~ x, data = train)\nfitted <- test |>\n  mutate(\n    predicted = predict(fit, newdata = test),\n    error = y - predicted,\n    squared_error = error ^ 2\n  )\nfitted |>\n  ggplot(aes(x = x, y = predicted)) +\n  geom_step() +\n  geom_point()\n```\n:::\n\n\n# Try with baseball salaries. Real population is nice.\n# No numeric predictor. Might need to get 2021 and 2022 data. Those exist.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaseball <- read_csv(\"../data/baseball.csv\")\n\ntruth <- baseball |>\n  group_by(position) |>\n  summarize(truth = mean(salary),\n            num = n())\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}