arrange(x) |>
print(n = 5) |>
mutate(cdf = cumsum(w) / sum(w)) |>
print(n = 5) |>
filter(cdf > q) |>
print(n = 5) |>
slice_head(n = 1) |>
pull(x)
qnorm(.9765)
qnorm(.975)
estimator <- function(data) {
data |>
summarize(
estimate = weighted.mean(
x = outcome_variable,
w = weight
)
) |>
pull(estimate)
}
estimator(data.frame(x = 1:3, weight = 1:3))
estimator(data.frame(outcome_variable = 1:3, weight = 1:3))
estimator <- function(data) {
data |>
summarize(
estimate = weighted.mean(
x = outcome_variable,
w = weight
)
)
}
estimator(data.frame(outcome_variable = 1:3, weight = 1:3))
estimator <- function(data) {
data |>
summarize(
estimate = weighted.mean(
x = outcome_variable,
w = weight
)
)
}
estimator <- function(data) {
estimate <- data |>
summarize(
estimate = weighted.mean(
x = outcome_variable,
w = weight
)
)
return(estimate)
}
estimator(data.frame(outcome_variable = 1:3, weight = 1:3))
sim
sim <- data.frame(name = c("Luis","William","Susan","Ayesha"),
weight = c(4,1,1,4),
employed = c(1, 0, 0, 1)) |>
print()
sim
sim |>
mutate(repwt1 = c(3,1,2,5),
repwt2 = c(5,2,1,3),
repwt3 = c(3,2,1,4))
sim2 <- sim |>
mutate(repwt1 = c(3,1,2,5),
repwt2 = c(5,2,1,3),
repwt3 = c(3,2,1,4)) |>
print()
sim_rep <- sim |>
mutate(repwt1 = c(3,1,2,5),
repwt2 = c(5,2,1,3),
repwt3 = c(3,2,1,4)) |>
print()
replicates <- sim_rep |>
select(-employed) |>
pivot_longer(cols = starts_with("repwt"),
names_to = replicate,
values_to = weight) |>
group_by(replicate) |>
summarize(estimate = weighted.mean(employed, w = weight))
replicates <- sim_rep |>
select(-employed) |>
pivot_longer(cols = starts_with("repwt"),
names_to = "replicate",
values_to = "weight") |>
group_by(replicate) |>
summarize(estimate = weighted.mean(employed, w = weight))
sim_rep |>
select(-employed) |>
pivot_longer(cols = starts_with("repwt"),
names_to = "replicate",
values_to = "weight") |>
group_by(replicate)
replicates <- sim_rep |>
select(-weight) |>
pivot_longer(cols = starts_with("repwt"),
names_to = "replicate",
values_to = "weight") |>
group_by(replicate) |>
summarize(estimate = weighted.mean(employed, w = weight))
replicates <- sim_rep |>
select(-weight) |>
pivot_longer(cols = starts_with("repwt"),
names_to = "replicate",
values_to = "weight") |>
group_by(replicate) |>
summarize(estimate = weighted.mean(employed, w = weight)) |>
pull(estimate)
replicates
sim_rep <- sim |>
mutate(repwt1 = c(3,1,3,5),
repwt2 = c(5,2,1,3),
repwt3 = c(3,2,1,4)) |>
print()
replicates <- sim_rep |>
select(-weight) |>
pivot_longer(cols = starts_with("repwt"),
names_to = "replicate",
values_to = "weight") |>
group_by(replicate) |>
summarize(estimate = weighted.mean(employed, w = weight)) |>
pull(estimate)
replicates
format(round(replicates,2), nsmall = 2)
paste0(format(round(replicates,2), nsmall = 2), collapse = ", ")
format(round(sd(replicates),2),nsmall=2)
c(-1,1) * sd(replicates)
format(round(0.80 + c(-1,1) * 1.96 * sd(replicates),2),nsmall=2)
?rename_at
?rename_with
estimator <- function(data, weight_name) {
estimate <- data |>
summarize(
estimate = weighted.mean(
x = outcome_variable,
w = matches(weight_name)
)
)
return(estimate)
}
estimator(data = sim_rep, weight_name = "weight")
estimator <- function(weight_name) {
estimate <- data |>
summarize(
estimate = weighted.mean(
x = employed,
w = matches(weight_name)
)
)
return(estimate)
}
estimator(weight_name = "weight")
estimator(data = sim_rep, weight_name = "weight")
estimator <- function(data, weight_name) {
estimate <- data |>
summarize(
estimate = weighted.mean(
x = employed,
w = matches(weight_name)
)
)
return(estimate)
}
estimator(data = sim_rep, weight_name = "weight")
estimator <- function(data, weight_name) {
estimate <- data |>
summarize(
estimate = weighted.mean(
x = employed,
w = vars(matches(weight_name))
)
)
return(estimate)
}
estimator(data = sim_rep, weight_name = "weight")
?matches
estimator <- function(data) {
estimate <- data |>
summarize(
estimate = weighted.mean(
x = employed,
w = weight
)
)
return(estimate)
}
estimator(data = sim_rep)
estimator(data = sim_rep |> select(-weight) |> rename(weight = repwt1))
estimator(data = sim_rep |> select(-weight) |> rename(weight = "repwt1"))
sim_rep |> select(-weight) |> rename(weight = "repwt1")
estimator <- function(data, weight_name) {
estimate <- data |>
# Rename the weight we are using to be called weight_for_estimator
rename(weight_for_estimator = weight_name) |>
summarize(
estimate = weighted.mean(
x = employed,
w = weight_for_estimator
)
)
return(estimate)
}
estimator(data = sim_rep)
estimator(data = sim_rep, weight_name = "weight")
data |>
# Rename the weight we are using to be called weight_for_estimator
rename(matches(weight_for_estimator), weight_name)
data |>
# Rename the weight we are using to be called weight_for_estimator
rename(matches(weight_name),"weight_for_estimator")
data <- sim_rep
data |>
# Rename the weight we are using to be called weight_for_estimator
rename(matches(weight_name),"weight_for_estimator")
weight_name <- "repwt1"
data |>
# Rename the weight we are using to be called weight_for_estimator
rename(matches(weight_name),"weight_for_estimator")
?rename
if (!is.data.frame(data)) {
stop("Error: data should be a data frame or tibble")
}
!length(weight) == nrow(data)
(!length(weight) == nrow(data))
weight <- sim_rep$repwt1
if (!length(weight) == nrow(data)) {
stop("Error: weights should be a vector of length equal to the tibble rows")
}
data |>
bind_cols(weight = weight)
data.frame(x = 1:3) |> select(-weight)
if (any(colnames(data) == "weight")) {
data <- data |> select(-weight)
}
data |>
bind_cols(weight = weight)
estimator <- function(
data,  # a tibble
weight # a vector of weights
) {
if (!is.data.frame(data)) {
stop("Error: data should be a data frame or tibble")
}
if (!length(weight) == nrow(data)) {
stop("Error: weights should be a vector of length equal to the tibble rows")
}
if (any(colnames(data) == "weight")) {
data <- data |> select(-weight)
}
data |>
bind_cols(weight = weight) |>
summarize(
estimate = weighted.mean(
x = employed,
w = weight_for_estimator
)
)
return(estimate)
}
estimator(data = sim_rep, weight_name = "weight")
estimator <- function(
data,  # a tibble
weight # a vector of weights
) {
if (!is.data.frame(data)) {
stop("Error: data should be a data frame or tibble")
}
if (!length(weight) == nrow(data)) {
stop("Error: weights should be a vector of length equal to the tibble rows")
}
if (any(colnames(data) == "weight")) {
data <- data |> select(-weight)
}
estimate <- data |>
bind_cols(weight = weight) |>
summarize(
estimate = weighted.mean(
x = employed,
w = weight_for_estimator
)
)
return(estimate)
}
estimator(data = sim_rep, weight_name = "weight")
estimator(data = sim_rep, weight = sim_rep |> pull(weight))
estimator <- function(
data,  # a tibble
weight # a vector of weights
) {
if (!is.data.frame(data)) {
stop("Error: data should be a data frame or tibble")
}
if (!length(weight) == nrow(data)) {
stop("Error: weights should be a vector of length equal to the tibble rows")
}
if (any(colnames(data) == "weight")) {
data <- data |> select(-weight)
}
estimate <- data |>
bind_cols(weight = weight) |>
summarize(
estimate = weighted.mean(
x = employed,
w = weight
)
)
return(estimate)
}
estimator(data = sim_rep, weight = sim_rep |> pull(weight))
estimator(data = sim_rep, weight = sim_rep |> pull(repwt1))
estimator(data = sim_rep, weight = sim_rep |> pull(repwt2))
estimator(data = sim_rep, weight = sim_rep |> pull(repwt3))
sapply(
c("repwt1","repwt2","repwt3"),
esitmator,
data = sim_rep
)
sapply(
c("repwt1","repwt2","repwt3"),
esitmator,
data = sim_rep
)
sapply(
c("repwt1","repwt2","repwt3"),
estimator,
data = sim_rep
)
replicate_weights <- tibble(
repwt1 = c(3,1,3,5),
repwt2 = c(5,2,1,3),
repwt3 = c(3,2,1,4)
)
replicate_weights
lapply(replicate_weights, estimator, data = sim_rep)
sapply(replicate_weights, estimator, data = sim_rep)
sim
estimator(
data = sim,
weight = replicate_weights[,i]
)
for (i in 1:ncol(replicate_weights)) {
estimator(
data = sim,
weight = replicate_weights[,i]
)
}
replicate_weights
estimator(
data = sim,
weight = replicate_weights[[i]]
)
for (i in 1:ncol(replicate_weights)) {
estimator(
data = sim,
weight = replicate_weights[[i]]
)
}
replicate_weights
estimates <- apply(
replicate_weights,
2,
estimator,
data = sim
)
estimates
unlist(estimates)
weight_name
sim_rep |> pull(weight_name)
sim_rep |>
summarize(
estimate = weighted.mean(
x = employed,
w = sim_rep |> pull(weight_name)
)
)
estimator <- function(weight_name) {
sim_rep |>
summarize(
estimate = weighted.mean(
x = employed,
w = sim_rep |> pull(weight_name)
)
)
}
estimator("weight")
estimator("repwt1")
estimator("repwt2")
estimator("repwt3")
weight_name <- weight
if (!weight_name %in% colnames(data)) {
stop("weight_name should be a column of data")
}
estimator <- function(data, weight_name) {
if (!is.character(weight_name)) {
stop("weight_name should be a character string name in quotes")
}
if (!weight_name %in% colnames(data)) {
stop("weight_name should be a column of data")
}
sim_rep |>
summarize(
estimate = weighted.mean(
x = employed,
w = sim_rep |> pull(weight_name)
)
)
}
estimator("weight")
estimator(data = sim, weight_name = "weight")
estimator <- function(data, weight_name) {
if (!is.character(weight_name)) {
stop("weight_name should be a character string name in quotes")
}
if (!weight_name %in% colnames(data)) {
stop("weight_name should be a column of data")
}
data |>
summarize(
estimate = weighted.mean(
x = employed,
w = sim_rep |> pull(weight_name)
)
)
}
estimator(data = sim, weight_name = "weight")
estimator(data = sim, weight_name = "repwt3")
estimator(data = sim_rep, weight_name = "repwt3")
estimator(data = sim_rep, weight_name = "weight")
estimator(data = sim_rep, weight_name = "repwt3")
estimator(data = sim_rep, weight_name = "repwt2")
estimator(data = sim_rep, weight_name = "repwt1")
estimate <- estimator(data = sim_rep, weight_name = "weight")
format(round(estimate,2),nsmall = 2)
c(
estimator(data = sim_rep, weight_name = "repwt1"),
estimator(data = sim_rep, weight_name = "repwt2"),
estimator(data = sim_rep, weight_name = "repwt3")
)
estimator <- function(data, weight_name) {
data |>
summarize(
estimate = weighted.mean(
x = employed,
w = sim_rep |> pull(weight_name)
)
) |>
pull(estimate)
}
estimate <- estimator(data = sim_rep, weight_name = "weight")
estimate
estimator <- function(data, weight_name) {
data |>
summarize(
estimate = weighted.mean(
x = employed,
w = sim_rep |> pull(weight_name)
)
)
}
estimate <- estimator(data = sim_rep, weight_name = "weight")
estimate
c(
estimator(data = sim_rep, weight_name = "repwt1") |> pull(estimate),
estimator(data = sim_rep, weight_name = "repwt2") |> pull(estimate),
estimator(data = sim_rep, weight_name = "repwt3") |> pull(estimate)
)
estimator <- function(data, weight_name) {
data |>
summarize(
estimate = weighted.mean(
x = employed,
# extract the weight column
w = sim_rep |> pull(weight_name)
)
) |>
# extract the scalar estimate
pull(estimate)
}
?pull
data |>
summarize(
estimate = weighted.mean(
x = employed,
# extract the weight column
w = sim_rep |> pull(weight_name)
)
) |>
# extract the scalar estimate
pull(
)
c(
estimator(data = sim_rep, weight_name = "repwt1"),
estimator(data = sim_rep, weight_name = "repwt2"),
estimator(data = sim_rep, weight_name = "repwt3")
)
estimate <- estimator(data = sim_rep, weight_name = "weight")
estimate
replicates <- c(
estimator(data = sim_rep, weight_name = "repwt1"),
estimator(data = sim_rep, weight_name = "repwt2"),
estimator(data = sim_rep, weight_name = "repwt3")
)
format(round(replicates,2),nsmall = 2)
replicate_estimates <- c(
estimator(data = sim_rep, weight_name = "repwt1"),
estimator(data = sim_rep, weight_name = "repwt2"),
estimator(data = sim_rep, weight_name = "repwt3")
)
standard_error <- sd(replicate_estimates)
standard_error
confidence_interval <- estimate + c(-1,1) * 1.96 * standard_error
confidence_interval
paste(format(round(confidence_interval,2),nsmall = 2),collapse = " to ")
