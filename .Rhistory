mutate(table = rep(1:ceiling(n() / 4), 4)[1:n()]) |>
# sort by last name
arrange(name) |>
write_csv("phillips_assigned_1.csv")
?print.xtable
print(xtable(phillips_assigned, rownames = F),
include.rownames = F)
print(xtable(phillips_assigned),
include.rownames = F)
max(phillips$table)
max(phillips_assigned$table)
nrow(upson_assigned)
nrow(upson_assigned) / 2
print(xtable(phillips_assigned[1:40,]),
include.rownames = F)
print(xtable(phillips_assigned[1:40,]),
include.rownames = F, comment = F)
print(xtable(phillips_assigned[1:40,] |> select(-netid)),
include.rownames = F, comment = F)
nrow(phillips_assigned)
phillips_assigned[1:40,] |>
bind_cols(phillips_assigned[41:nrow(phillips_assigned)])
phillips_assigned[1:40,]
phillips_assigned[1:40,] |>
bind_cols(phillips_assigned[41:nrow(phillips_assigned),])
phillips_assigned[41:nrow(phillips_assigned),]
nrow(phillips_assigned)
phillips_assigned |>
select(-netid) |>
mutate(mycol = rep(1:2,each = n() / 2)[1:n()])
phillips_assigned[1:36,] |>
bind_cols(phillips_assigned[38:72,])
phillips_assigned[1:36,] |>
bind_cols(phillips_assigned[38:73,])
nrow(phillips_assigned)
length(1:36)
phillips_assigned[1:37,] |>
bind_cols(phillips_assigned[38:73,])
phillips_assigned[1:37,] |>
bind_cols(rbind(phillips_assigned[38:73,],NA,NA))
phillips_assigned[1:37,] |>
select(-netid) |>
bind_cols(rbind(phillips_assigned[38:73,] |> select(-netid),c(NA,NA)))
nrow(phillips_assigned)
phillips_assigned[1:37,] |>
select(-netid) |>
bind_cols(rep("       ",37)) |>
bind_cols(rbind(phillips_assigned[38:73,] |>
select(-netid),c(NA,NA)))
nrow(upson_assigned)
print(xtable(upson_assigned[37:71,] |> select(-netid)),
include.rownames = F)
baseball <- read_csv("../data/baseball.csv") |>
arrange(-salary) |>
select(player, team, position, salary) |>
print(n = 5)
library(tidyverse)
library(scales)
baseball <- read_csv("https://info3370.github.io/data/baseball.csv")
baseball_highest <- baseball |>
filter(salary == max(salary)) |>
mutate(player = paste(
str_replace_all(player,".*, ",""),
str_replace_all(player,",.*","")
))
top_50pct_pay_portion <- baseball |>
arrange(-salary) |>
mutate(
cdf = 1:n() / n(),
top = cdf <= .5
) |>
group_by(top) |>
summarize(salary = sum(salary)) |>
mutate(percent_of_total = salary / sum(salary)) |>
filter(top) |>
pull(percent_of_total) |>
label_percent()()
baseball |>
ggplot(aes(x = salary)) +
geom_histogram(bins = 50) +
scale_x_continuous(
name = "Annual Salary",
labels = label_dollar()
) +
ylab("Count") +
ggtitle(paste("Salary of all ",nrow(baseball),"MLB players on Opening Day 2023"))
baseball |>
group_by(team) |>
summarize(salary_mean = mean(salary), salary_sd = sd(salary)) |>
ggplot(aes(x = salary_mean, y = salary_sd)) +
geom_point() +
ggrepel::geom_text_repel(
data = pay_by_team_all |> filter(salary_mean %in% range(salary_mean)),
aes(label = team)
) +
scale_x_continuous(name = "Average Salary", labels = label_dollar()) +
scale_y_continuous(name = "Standard Deviation of Salary", labels = label_dollar()) +
theme(plot.margin = unit(c(5.5,20,5.5,5.5),"pt"))
baseball |>
group_by(team) |>
summarize(salary_mean = mean(salary), salary_sd = sd(salary)) |>
ggplot(aes(x = salary_mean, y = salary_sd)) +
geom_point() +
ggrepel::geom_text_repel(
data = .data|> filter(salary_mean %in% range(salary_mean)),
aes(label = team)
) +
scale_x_continuous(name = "Average Salary", labels = label_dollar()) +
scale_y_continuous(name = "Standard Deviation of Salary", labels = label_dollar()) +
theme(plot.margin = unit(c(5.5,20,5.5,5.5),"pt"))
baseball |>
group_by(team) |>
summarize(salary_mean = mean(salary), salary_sd = sd(salary)) |>
ggplot(aes(x = salary_mean, y = salary_sd)) +
geom_point() +
# ggrepel::geom_text_repel(
#    data = .data|> filter(salary_mean %in% range(salary_mean)),
#    aes(label = team)
# ) +
scale_x_continuous(name = "Average Salary", labels = label_dollar()) +
scale_y_continuous(name = "Standard Deviation of Salary", labels = label_dollar()) +
theme(plot.margin = unit(c(5.5,20,5.5,5.5),"pt"))
baseball |>
group_by(team) |>
summarize(salary_mean = mean(salary), salary_sd = sd(salary)) |>
ggplot(aes(x = salary_mean, y = salary_sd)) +
geom_point() +
geom_text(aes(hjust = case_when(
team == "Oakland" ~ 2,
team == "N.Y. Mets" ~ -1
)))
baseball |>
group_by(team) |>
summarize(salary_mean = mean(salary), salary_sd = sd(salary)) |>
ggplot(aes(x = salary_mean, y = salary_sd)) +
geom_point() +
geom_text(aes(
label = team, hjust = case_when(
team == "Oakland" ~ 2,
team == "N.Y. Mets" ~ -1
)
)) +
# ggrepel::geom_text_repel(
#    data = .data|> filter(salary_mean %in% range(salary_mean)),
#    aes(label = team)
# ) +
scale_x_continuous(name = "Average Salary", labels = label_dollar()) +
scale_y_continuous(name = "Standard Deviation of Salary", labels = label_dollar()) +
theme(plot.margin = unit(c(5.5,20,5.5,5.5),"pt"))
baseball |>
group_by(team) |>
summarize(salary_mean = mean(salary), salary_sd = sd(salary)) |>
ggplot(aes(x = salary_mean, y = salary_sd)) +
geom_point() +
geom_text(aes(
label = team, vjust = case_when(
team == "Oakland" ~ 2,
team == "N.Y. Mets" ~ -1
)
)) +
# ggrepel::geom_text_repel(
#    data = .data|> filter(salary_mean %in% range(salary_mean)),
#    aes(label = team)
# ) +
scale_x_continuous(name = "Average Salary", labels = label_dollar()) +
scale_y_continuous(name = "Standard Deviation of Salary", labels = label_dollar()) +
theme(plot.margin = unit(c(5.5,20,5.5,5.5),"pt"))
baseball |>
group_by(team) |>
summarize(salary_mean = mean(salary), salary_sd = sd(salary)) |>
ggplot(aes(x = salary_mean, y = salary_sd)) +
geom_point() +
geom_text(aes(
label = team, hjust = case_when(
team == "Oakland" ~ -1,
team == "N.Y. Mets" ~ 2
)
)) +
# ggrepel::geom_text_repel(
#    data = .data|> filter(salary_mean %in% range(salary_mean)),
#    aes(label = team)
# ) +
scale_x_continuous(name = "Average Salary", labels = label_dollar()) +
scale_y_continuous(name = "Standard Deviation of Salary", labels = label_dollar()) +
theme(plot.margin = unit(c(5.5,20,5.5,5.5),"pt"))
baseball |>
group_by(team) |>
summarize(salary_mean = mean(salary), salary_sd = sd(salary)) |>
ggplot(aes(x = salary_mean, y = salary_sd)) +
geom_point() +
geom_text(aes(
label = team, hjust = case_when(
team == "Oakland" ~ -.1,
team == "N.Y. Mets" ~ 1.1
)
)) +
# ggrepel::geom_text_repel(
#    data = .data|> filter(salary_mean %in% range(salary_mean)),
#    aes(label = team)
# ) +
scale_x_continuous(name = "Average Salary", labels = label_dollar()) +
scale_y_continuous(name = "Standard Deviation of Salary", labels = label_dollar()) +
theme(plot.margin = unit(c(5.5,20,5.5,5.5),"pt"))
)
baseball |>
group_by(team) |>
summarize(salary_mean = mean(salary), salary_sd = sd(salary)) |>
ggplot(aes(x = salary_mean, y = salary_sd)) +
geom_point() +
geom_text(aes(
label = case_when(mean_salary %in% range(mean_salary) ~ team),
hjust = case_when(
team == "Oakland" ~ -.2,
team == "N.Y. Mets" ~ 1.2
)
)) +
# ggrepel::geom_text_repel(
#    data = .data|> filter(salary_mean %in% range(salary_mean)),
#    aes(label = team)
# ) +
scale_x_continuous(name = "Average Salary", labels = label_dollar()) +
scale_y_continuous(name = "Standard Deviation of Salary", labels = label_dollar()) +
theme(plot.margin = unit(c(5.5,20,5.5,5.5),"pt"))
baseball |>
group_by(team) |>
summarize(salary_mean = mean(salary), salary_sd = sd(salary)) |>
ggplot(aes(x = salary_mean, y = salary_sd)) +
geom_point() +
geom_text(aes(
label = case_when(salary_mean %in% range(mean_salary) ~ team),
hjust = case_when(
team == "Oakland" ~ -.2,
team == "N.Y. Mets" ~ 1.2
)
)) +
# ggrepel::geom_text_repel(
#    data = .data|> filter(salary_mean %in% range(salary_mean)),
#    aes(label = team)
# ) +
scale_x_continuous(name = "Average Salary", labels = label_dollar()) +
scale_y_continuous(name = "Standard Deviation of Salary", labels = label_dollar()) +
theme(plot.margin = unit(c(5.5,20,5.5,5.5),"pt"))
baseball |>
group_by(team) |>
summarize(salary_mean = mean(salary), salary_sd = sd(salary)) |>
ggplot(aes(x = salary_mean, y = salary_sd)) +
geom_point() +
geom_text(aes(
label = case_when(salary_mean %in% range(salary_mean) ~ team),
hjust = case_when(
team == "Oakland" ~ -.2,
team == "N.Y. Mets" ~ 1.2
)
)) +
# ggrepel::geom_text_repel(
#    data = .data|> filter(salary_mean %in% range(salary_mean)),
#    aes(label = team)
# ) +
scale_x_continuous(name = "Average Salary", labels = label_dollar()) +
scale_y_continuous(name = "Standard Deviation of Salary", labels = label_dollar()) +
theme(plot.margin = unit(c(5.5,20,5.5,5.5),"pt"))
draw_sample_A(population = baseball)
# Strategy A
draw_sample_A <- function(population) {
population |>
# Define sampling probability and weight
mutate(
p_sampled = 60 / n(),
sampling_weight = 1 / p_sampled
) |>
# Sample 60 players
sample_n(size = 60)
}
draw_sample_A(population = baseball)
simple_random_sample <- function(population) {
population |>
# Define sampling probability and weight
mutate(
p_sampled = 60 / n(),
sampling_weight = 1 / p_sampled
) |>
# Sample 60 players
sample_n(size = 60)
}
simple_random_sample <- function(population) {
population |>
# Define sampling probability and weight
mutate(
p_sampled = 60 / n(),
sampling_weight = 1 / p_sampled
) |>
# Sample 60 players
sample_n(size = 60)
}
simple_random_sample(population = baseball)
simple_random_sample(population = baseball)
simple_sample <- function(population) {
population |>
# Define sampling probability and weight
mutate(
p_sampled = 60 / n(),
sampling_weight = 1 / p_sampled
) |>
# Sample 60 players
sample_n(size = 60)
}
simple_sample(population = baseball)
# Strategy B
stratified_sample <- function(population) {
population |>
# Draw sample within each team
group_by(team) |>
# Define sampling probability and weight
mutate(
p_sampled = 2 / n(),
sampling_weight = 1 / p_sampled
) |>
# Within each team, sample 2 players
sample_n(size = 2)
}
sample <- simple_sample(population = baseball)
sample_example <- simple_sample(population = baseball)
estimator(sample = sample_example)
estimator <- function(sample) {
sample |>
summarize(estimate = weighted.mean(
x = salary,
w = sampling_weight
)) |>
pull(estimate)
}
estimator(sample = sample_example)
pitchers <- baseball |>
filter(position == "LHP" | position == "RHP")
test_difference <- function(data) {
if (data |> nrow() <= 2) {
stop("Error: Expects a data frame with more than 2 rows. There should be one row per player")
}
if (!any(data |> colnames() == "salary")) {
stop("Error: Expects salary to be a column of the data")
}
if (!any(data |> colnames() == "position")) {
stop("Error: Expects salary to be a column of the data")
}
if (data |> distinct(position) |> nrow() != 2) {
stop("Error: Expects a data frame with 2 distinct positions")
}
# Produce estimate in each subgroup
subgroup_estimates <- data |>
group_by(position) |>
summarize(estimate = mean(salary)) |>
pivot_wider(names_from = "position", values_from = "estimate")
# Produce difference estimate with significance test
test_of_difference <- data |>
arrange(position) |>
group_by(position) |>
summarize(estimate = mean(salary),
estimate_var = var(salary) / n()) |>
summarize(difference = -diff(estimate),
standard_error = sqrt(sum(estimate_var))) |>
mutate(
ci_min = difference - qnorm(.975) * standard_error,
ci_max = difference + qnorm(.975) * standard_error,
p_value = 2 * pnorm(abs(difference) / standard_error, lower.tail = F),
significant = p_value < .05
)
# Return a combined data frame
return(
subgroup_estimates |>
bind_cols(test_of_difference)
)
}
good_sample <- F
while(!good_sample) {
random_seed <- round(10e3*runif(1))
set.seed(random_seed)
new_sample <- pitchers |>
filter(position %in% c("LHP","RHP")) |>
sample_n(40)
tested <- test_difference(new_sample)
good_sample <- tested$significant
}
print(random_seed)
pitchers_sample |>
group_by(position) |>
summarize(salary_mean = mean(salary))
pitchers_sample <- pitchers |>
sample_n(size = 40)
pitchers_sample |>
group_by(position) |>
summarize(salary_mean = mean(salary))
set.seed(1599)
pitchers_sample <- pitchers |>
sample_n(size = 40)
pitchers_sample |>
group_by(position) |>
summarize(salary_mean = mean(salary))
baseball <- read_csv("https://info3370.github.io/data/baseball.csv")
baseball
gradebook <- read_csv("/users/ilundberg/downloads/draw-a-sample-by-each_gradebook_1394481.csv")
gradebook
gradebook |>
pull(Email)
setwd("/users/ilundberg/downloads/")
canvas <- read_csv("2024-02-06T1007_Grades-INFO3370_INFO5371.csv")
canvas
canvas |> select(1:5)
colnames(canvas)
gradebook
canvas |>
select(1:5) |>
left_join(
gradebook |>
mutate(`SIS Login ID` = str_remove(Email,"@.*")) |>
mutate(Lecture3 = Participation / 20)
select(email, Lecture3)
canvas |>
select(1:5) |>
left_join(
gradebook |>
mutate(`SIS Login ID` = str_remove(Email,"@.*")) |>
mutate(Lecture3 = Participation / 20) |>
select(email, Lecture3)
)
canvas |>
select(1:5) |>
left_join(
gradebook |>
mutate(`SIS Login ID` = str_remove(Email,"@.*")) |>
mutate(Lecture3 = Participation / 20) |>
select(`SIS Login ID`, Lecture3)
)
gradebook |>
mutate(`SIS Login ID` = str_remove(Email,"@.*")) |>
mutate(Lecture3 = Participation / 20) |>
select(`SIS Login ID`, Lecture3)
summary(    gradebook |>
mutate(`SIS Login ID` = str_remove(Email,"@.*")) |>
mutate(Lecture3 = Participation / 20) |>
select(`SIS Login ID`, Lecture3))
canvas |>
select(1:5) |>
left_join(
gradebook |>
mutate(`SIS Login ID` = str_remove(Email,"@.*")) |>
mutate(Lecture3 = Participation / 20) |>
select(`SIS Login ID`, Lecture3),
by = `SIS Login ID`
)
canvas |>
select(1:5)
gradebook |>
mutate(`SIS Login ID` = str_remove(Email,"@.*")) |>
mutate(Lecture3 = Participation / 20) |>
select(`SIS Login ID`, Lecture3)
canvas |>
select(1:5) |>
left_join(
gradebook |>
mutate(`SIS Login ID` = str_remove(Email,"@.*")) |>
mutate(Lecture3 = Participation / 20) |>
select(`SIS Login ID`, Lecture3),
by = `SIS Login ID`
)
canvas |>
select(1:5) |>
left_join(
gradebook |>
mutate(`SIS Login ID` = str_remove(Email,"@.*")) |>
mutate(Lecture3 = Participation / 20) |>
select(`SIS Login ID`, Lecture3),
by = join_by(`SIS Login ID`)
)
merged <- canvas |>
select(1:5) |>
left_join(
gradebook |>
mutate(`SIS Login ID` = str_remove(Email,"@.*")) |>
mutate(Lecture3 = Participation / 20) |>
select(`SIS Login ID`, Lecture3),
by = join_by(`SIS Login ID`)
) |>
filter(!is.na(`SIS Login ID`)) |>
mutate(Lecture3 = ifelse(is.na(Lecture3),0,Lecture3))
nrow(gradebook)
merged |>
filter(Lecture3 > 0) |>
nrow()
gradebook <- read_csv("draw-a-sample-by-each_gradebook_1394481.csv") |>
mutate(`SIS Login ID` = str_remove(Email,"@.*")) |>
mutate(Lecture3 = Participation / 20) |>
select(`SIS Login ID`, Lecture3)
gradebook
nrow(gradebook)
merged |>
filter(Lecture3 > 0) |>
nrow()
gradebook |>
anti_join(canvas, by = `SIS Login ID`)
gradebook |>
anti_join(canvas, by = join_by(`SIS Login ID`))
merged <- canvas |>
select(1:5) |>
left_join(
gradebook,
by = join_by(`SIS Login ID`)
) |>
filter(!is.na(`SIS Login ID`)) |>
mutate(Lecture3 = ifelse(is.na(Lecture3),0,Lecture3))
merged |>
write_csv("for_canvas_upload.csv")
merged
