scale_x_discrete(name = element_blank(), labels = str_to_title) +
ylab("Mean Squared Error") +
facet_wrap(~sample, ncol = 3)
error = y - prediction,
generate_data <- function(sample_size) {
tibble(index = 1:sample_size) |>
mutate(
x1 = rnorm(n()),
x2 = rnorm(n()),
x3 = rnorm(n()),
x4 = rnorm(n()),
x5 = rnorm(n()),
x6 = rnorm(n()),
x7 = rnorm(n()),
x8 = rnorm(n()),
x9 = rnorm(n()),
x10 = rnorm(n()),
y = rnorm(n())
)
}
get_mse <- function(train, test) {
no_model <- lm(y ~ 1, data = train)
model <- lm(y ~ ., data = train)
test |>
mutate(
no_model = predict(no_model, newdata = test),
model = predict(model, newdata = test)
) |>
summarize(
no_model = mean((y - no_model) ^ 2),
model = mean((y - model) ^ 2)
)
}
sim_samp_size <- 100
# In-sample simulation
sim_one <- foreach(i = 1:100, .combine = "rbind") %do% {
data <- generate_data(sample_size = sim_samp_size)
get_mse(data, data)
}
# Out-of-sample simulation
sim_two <- foreach(i = 1:100, .combine = "rbind") %do% {
data <- generate_data(sample_size = sim_samp_size)
test <- generate_data(sample_size = sim_samp_size)
get_mse(data, test)
}
# Split sample simulation
sim_split <- foreach(i = 1:100, .combine = "rbind") %do% {
data <- generate_data(sample_size = sim_samp_size)
split <- initial_split(data, prop = .5)
get_mse(training(split), testing(split))
}
sim_one |>
mutate(sample = "One sample") |>
bind_rows(
sim_two |>
mutate(sample = "Two sample")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split sample")
) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_color_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
scale_x_discrete(name = element_blank(), labels = str_to_title) +
ylab("Mean Squared Error") +
facet_wrap(~sample, ncol = 3)
sample_size
replicate(10, rnorm(sample_size))
dim(replicate(10, rnorm(sample_size)))
as_tibble(replicate(10, rnorm(sample_size)))
?as_tibble
X <- replicate(10, rnorm(sample_size))
colnames(X) <- paste0("x",1:10)
tibble(X)
as_tibble(X)
X <- replicate(50, rnorm(sample_size))
sample_size = 1000
p <- 100
X <- replicate(p, rnorm(sample_size))
colnames(X) <- paste0("x",1:p)
X
as_tibble(X) |>
mutate(y = rnorm(n()))
generate_data <- function(sample_size = 1000) {
p <- 100
X <- replicate(p, rnorm(sample_size))
colnames(X) <- paste0("x",1:p)
as_tibble(X) |>
mutate(y = rnorm(n()))
}
get_mse <- function(train, test) {
no_model <- lm(y ~ 1, data = train)
model <- lm(y ~ ., data = train)
test |>
mutate(
no_model = predict(no_model, newdata = test),
model = predict(model, newdata = test)
) |>
summarize(
no_model = mean((y - no_model) ^ 2),
model = mean((y - model) ^ 2)
)
}
sim_samp_size <- 1000
# In-sample simulation
sim_one <- foreach(i = 1:100, .combine = "rbind") %do% {
data <- generate_data(sample_size = sim_samp_size)
get_mse(data, data)
}
# Out-of-sample simulation
sim_two <- foreach(i = 1:100, .combine = "rbind") %do% {
data <- generate_data(sample_size = sim_samp_size)
test <- generate_data(sample_size = sim_samp_size)
get_mse(data, test)
}
# Split sample simulation
sim_split <- foreach(i = 1:100, .combine = "rbind") %do% {
data <- generate_data(sample_size = sim_samp_size)
split <- initial_split(data, prop = .5)
get_mse(training(split), testing(split))
}
sim_one |>
mutate(sample = "One sample") |>
bind_rows(
sim_two |>
mutate(sample = "Two sample")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split sample")
) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_color_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
scale_x_discrete(name = element_blank(), labels = str_to_title) +
ylab("Mean Squared Error") +
facet_wrap(~sample, ncol = 3)
sim_one |>
mutate(sample = "One sample") |>
bind_rows(
sim_two |>
mutate(sample = "Two sample")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split sample")
) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_color_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
scale_x_discrete(name = element_blank(), labels = str_to_title) +
ylab("Mean Squared Error Estimate") +
facet_wrap(~sample, ncol = 3)
sim_one |>
mutate(sample = "One sample") |>
bind_rows(
sim_two |>
mutate(sample = "Two sample")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split sample")
) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_color_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
scale_x_discrete(name = element_blank(), labels = str_to_title) +
ylab("Mean Squared Error Estimate") +
facet_wrap(~sample, ncol = 3)
sim_one |>
mutate(sample = "One sample") |>
bind_rows(
sim_two |>
mutate(sample = "Two sample")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split sample")
) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_x_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
theme(legend.position = "none") +
ylab("Mean Squared Error Estimate") +
facet_wrap(~sample, ncol = 3)
sim_one |>
mutate(sample = "One sample") |>
bind_rows(
sim_two |>
mutate(sample = "Two sample")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split sample")
) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_x_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
theme(legend.position = "none") +
ylab("Mean Squared Error Estimate") +
facet_wrap(~sample, ncol = 3, labeller = str_to_title)
sim_one |>
mutate(sample = "One sample") |>
bind_rows(
sim_two |>
mutate(sample = "Two sample")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split sample")
) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_x_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
theme(legend.position = "none") +
ylab("Mean Squared Error Estimate") +
facet_wrap(~sample, ncol = 3, labeller = as_labeller(str_to_title))
sim_one |>
mutate(sample = "In-Sample Prediction") |>
bind_rows(
sim_two |>
mutate(sample = "Out-of-Sample Prediction")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split-Sample Prediction")
) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_x_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
theme(legend.position = "none") +
ylab("Mean Squared Error Estimate") +
facet_wrap(~sample, ncol = 3, labeller = as_labeller(str_to_title))
sim_one |>
mutate(sample = "In-Sample Prediction") |>
bind_rows(
sim_two |>
mutate(sample = "Out-of-Sample Prediction")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split-Sample Prediction")
) |>
mutate(sample = fct_relevel(sample, c(2,1,3))) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_x_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
theme(legend.position = "none") +
ylab("Mean Squared Error Estimate") +
facet_wrap(~sample, ncol = 3, labeller = as_labeller(str_to_title))
sim_one |>
mutate(sample = "In-Sample Prediction") |>
bind_rows(
sim_two |>
mutate(sample = "Out-of-Sample Prediction")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split-Sample Prediction")
) |>
mutate(sample = fct_relevel(sample, c("Out-of-Sample Prediction","In-Sample Prediction","Split-Sample Prediction"))) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_x_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
theme(legend.position = "none") +
ylab("Mean Squared Error Estimate") +
facet_wrap(~sample, ncol = 3, labeller = as_labeller(str_to_title))
sim_one |>
mutate(sample = "In-Sample Prediction") |>
bind_rows(
sim_two |>
mutate(sample = "Out-of-Sample Prediction")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split-Sample Prediction")
) |>
mutate(sample = fct_relevel(sample, c("Out-of-Sample Prediction","In-Sample Prediction","Split-Sample Prediction"))) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_x_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
theme(legend.position = "none") +
ylab("Mean Squared Error Estimate") +
facet_wrap(~sample, ncol = 3, labeller = as_labeller(str_to_title)) +
ggtitle("Each dot is a sample estimate")
sim_one |>
mutate(sample = "In-Sample Prediction") |>
bind_rows(
sim_two |>
mutate(sample = "Out-of-Sample Prediction")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split-Sample Prediction")
) |>
mutate(sample = fct_relevel(sample, c("Out-of-Sample Prediction","In-Sample Prediction","Split-Sample Prediction"))) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_x_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
theme(legend.position = "none") +
ylab("Mean Squared Error Estimate") +
facet_wrap(~sample, ncol = 3, labeller = as_labeller(str_to_title)) +
ggtitle("Each dot is an estimate from one simulation")
sim_one |>
mutate(sample = "In-Sample Prediction") |>
bind_rows(
sim_two |>
mutate(sample = "Out-of-Sample Prediction")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split-Sample Prediction")
) |>
mutate(sample = fct_relevel(sample, c("Out-of-Sample Prediction","In-Sample Prediction","Split-Sample Prediction"))) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_x_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
theme(legend.position = "none") +
ylab("Mean Squared Error Estimate") +
facet_wrap(~sample, ncol = 3, labeller = as_labeller(str_to_title)) +
ggtitle(subtitle = "Each dot is an estimate from one simulation")
sim_one |>
mutate(sample = "In-Sample Prediction") |>
bind_rows(
sim_two |>
mutate(sample = "Out-of-Sample Prediction")
) |>
bind_rows(
sim_split |>
mutate(sample = "Split-Sample Prediction")
) |>
mutate(sample = fct_relevel(sample, c("Out-of-Sample Prediction","In-Sample Prediction","Split-Sample Prediction"))) |>
#group_by(sample) |>
#summarize_all(mean) |>
pivot_longer(cols = -sample) |>
ggplot(aes(x = name, color = name, y = value)) +
geom_jitter(width = .1, height = 0) +
scale_x_discrete(
name = element_blank(),
labels = \(x) str_to_title(str_replace(x,"_"," "))
) +
theme(legend.position = "none") +
ylab("Mean Squared Error Estimate") +
facet_wrap(~sample, ncol = 3, labeller = as_labeller(str_to_title)) +
ggtitle(NULL, subtitle = "Each dot is an estimate from one simulation")
generate_data <- function(sample_size = 1000, p = 100) {
# Predictors are independent Normal
X <- replicate(p, rnorm(sample_size))
colnames(X) <- paste0("x",1:p)
as_tibble(X) |>
# Outcome is an independent Normal
mutate(y = rnorm(n()))
}
data <- generate_data(sample_size = 100)
model <- lm(y ~ ., data = data)
no_model <- lm(y ~ 1, data = data)
data |>
mutate(
predicted_model = predict(model),
predicted_no_model = predict(no_model),
squared_error_model = (y - predicted_model) ^ 2,
squared_error_no_model = (y - predicted_no_model) ^ 2,
) |>
select(starts_with("squared")) |>
summarize_all(.funs = mean)
dim(data)
data <- generate_data(sample_size = 1000)
model <- lm(y ~ ., data = data)
no_model <- lm(y ~ 1, data = data)
generate_data <- function(sample_size = 1000, num_features = 100) {
# Predictors are independent Normal
X <- replicate(num_features, rnorm(sample_size))
colnames(X) <- paste0("x",1:num_features)
as_tibble(X) |>
# Outcome is an independent Normal
mutate(y = rnorm(n()))
}
data <- generate_data()
data <- generate_data(sample_size = 1000, num_features = 100)
model <- lm(y ~ ., data = data)
no_model <- lm(y ~ 1, data = data)
data |>
mutate(
predicted_model = predict(model),
predicted_no_model = predict(no_model),
squared_error_model = (y - predicted_model) ^ 2,
squared_error_no_model = (y - predicted_no_model) ^ 2,
) |>
select(starts_with("squared")) |>
summarize_all(.funs = mean)
out_of_sample |>
mutate(
predicted_model = predict(model, newdata = out_of_sample),
predicted_no_model = predict(no_model, newdata = out_of_sample),
squared_error_model = (y - predicted_model) ^ 2,
squared_error_no_model = (y - predicted_no_model) ^ 2,
) |>
select(starts_with("squared")) |>
summarize_all(.funs = mean)
out_of_sample <- generate_data()
out_of_sample |>
mutate(
predicted_model = predict(model, newdata = out_of_sample),
predicted_no_model = predict(no_model, newdata = out_of_sample),
squared_error_model = (y - predicted_model) ^ 2,
squared_error_no_model = (y - predicted_no_model) ^ 2,
) |>
select(starts_with("squared")) |>
summarize_all(.funs = mean)
split <- initial_split(data, prop = .5)
model <- lm(y ~ x, data = training(split))
no_model <- lm(y ~ 1, data = training(split))
testing(split) |>
mutate(
predicted_model = predict(model, newdata = testing(split)),
predicted_no_model = predict(no_model, newdata = testing(split)),
squared_error_model = (y - predicted_model) ^ 2,
squared_error_no_model = (y - predicted_no_model) ^ 2,
) |>
select(starts_with("squared")) |>
summarize_all(.funs = mean)
model <- lm(y ~ ., data = training(split))
no_model <- lm(y ~ 1, data = training(split))
testing(split) |>
mutate(
predicted_model = predict(model, newdata = testing(split)),
predicted_no_model = predict(no_model, newdata = testing(split)),
squared_error_model = (y - predicted_model) ^ 2,
squared_error_no_model = (y - predicted_no_model) ^ 2,
) |>
select(starts_with("squared")) |>
summarize_all(.funs = mean)
library(rsample)
