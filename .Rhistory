roster <- read_csv("2024SP_INFO3370_001(9865)_Jan_24_2024.csv")
library(tidyverse)
roster <- read_csv("2024SP_INFO3370_001(9865)_Jan_24_2024.csv")
setwd("~/Dropbox/info3370_sp24/roster")
library(tidyverse)
roster <- read_csv("2024SP_INFO3370_001(9865)_Jan_24_2024.csv")
roster
colnames(roster)
rister
roster
table(roster$CLASS)
table(roster$`CLASS NBR`)
roster <- readxl::read_xlsx("section_roster.xlsx", sheet = "upson")
roster <- readxl::read_xlsx("section_roster.xlsx", sheet = 1)
roster
roster <- readxl::read_xlsx("section_roster.xlsx", sheet = 1,
col_names = F)
roster
upson <- readxl::read_xlsx("section_roster.xlsx", sheet = 1,
col_names = F)
phillips <- readxl::read_xlsx("section_roster.xlsx", sheet = 2,
col_names = F)
phillips
upson |>
select(netid = `...5`, name = `...6`)
upson |>
select(netid = `...5`, name = `...6`) |>
# Random sort
sample_frac(replace = T)
upson
dim(upson)
5*13
14*5
upson |>
select(netid = `...5`, name = `...6`) |>
# Random sort
sample_frac(replace = T) |>
# Room has 14 tables. Assign 11 of them
# so overflow for wait list exists.
mutate(table = rep(1:11, ceiling(n() / 11))[1:n()])
temp <- upson |>
select(netid = `...5`, name = `...6`) |>
# Random sort
sample_frac(replace = T) |>
# Room has 14 tables. Assign 11 of them
# so overflow for wait list exists.
mutate(table = rep(1:11, ceiling(n() / 11))[1:n()])
table(temp$table)
nrow(upson)
71 / 12
71 / 11
upson |>
select(netid = `...5`, name = `...6`) |>
# Random sort
sample_frac(replace = T) |>
# Room has 14 tables. Assign 12 of them
# so overflow for wait list exists.
mutate(table = rep(1:12, ceiling(n() / 12))[1:n()])
upson |>
select(name = `...6`, netid = `...5`) |>
# Random sort
sample_frac(replace = T) |>
# Room has 14 tables. Assign 12 of them
# so overflow for wait list exists.
mutate(table = rep(1:12, ceiling(n() / 12))[1:n()]) |>
# sort by last name
arrange(name)
upson |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = T) |>
# Room has 14 tables. Assign 12 of them
# so overflow for wait list exists.
mutate(table = rep(1:12, ceiling(n() / 12))[1:n()]) |>
# sort by last name
arrange(name)
upson_assigned <- upson |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = T) |>
# Room has 14 tables. Assign 12 of them
# so overflow for wait list exists.
mutate(table = rep(1:12, ceiling(n() / 12))[1:n()]) |>
# sort by last name
arrange(name)
upson_assigned
upson |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = T) |>
# Room has 14 tables. Assign 12 of them
# so overflow for wait list exists.
mutate(table = rep(1:12, ceiling(n() / 12))[1:n()]) |>
# sort by last name
arrange(name)
upson |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = T) |>
# Room has 14 tables. Assign 12 of them
# so overflow for wait list exists.
mutate(table = rep(1:12, ceiling(n() / 12))[1:n()]) |>
# sort by last name
arrange(name)
upson_assigned <- upson |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = T) |>
# Room has 14 tables. Assign 12 of them
# so overflow for wait list exists.
mutate(table = rep(1:12, ceiling(n() / 12))[1:n()]) |>
# sort by last name
arrange(name)
upson_assigned
upson |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = F) |>
# Room has 14 tables. Assign 12 of them
# so overflow for wait list exists.
mutate(table = rep(1:12, ceiling(n() / 12))[1:n()]) |>
# sort by last name
arrange(name)
upson |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = F) |>
# Room has 14 tables. Assign 12 of them
# so overflow for wait list exists.
mutate(table = rep(1:12, ceiling(n() / 12))[1:n()]) |>
# sort by last name
arrange(name)
upson |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = F) |>
# Room has 14 tables. Assign 12 of them
# so overflow for wait list exists.
mutate(table = rep(1:12, ceiling(n() / 12))[1:n()]) |>
# sort by last name
arrange(name)
upson |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = F) |>
# Room has 14 tables. Assign 12 of them
# so overflow for wait list exists.
mutate(table = rep(1:12, ceiling(n() / 12))[1:n()]) |>
# sort by last name
arrange(name)
phillips
phillips |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = F)
phillips |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = F) |>
# Room has 14 tables. Assign 12 of them
# so overflow for wait list exists.
mutate(table = rep(1:12, ceiling(n() / 12))[1:n()])
phillips_assigned <- phillips |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = F) |>
# Assign tables of 4
mutate(table = rep(1:ceiling(n() / 4))[1:n()]) |>
# sort by last name
arrange(name)
phillips_assigned
phillips |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = F)
phillips_assigned <- phillips |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = F) |>
# Assign tables of 4
mutate(table = rep(1:ceiling(n() / 4), 4)[1:n()]) |>
# sort by last name
arrange(name)
phillips_assigned
table(phillips_assigned$table)
phillips_assigned <- phillips |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = F) |>
# Assign tables of 4
mutate(table = rep(1:ceiling(n() / 4), 4)[1:n()]) |>
# sort by last name
arrange(name) |>
write_csv("phillips_assigned_1.csv")
upson_assigned <- upson |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = F) |>
# Room has 14 tables. Assign 12 of them
# so overflow for wait list exists.
mutate(table = rep(1:12, ceiling(n() / 12))[1:n()]) |>
# sort by last name
arrange(name) |>
write_csv("upson_assigned_1.csv")
xtable::xtable(phillips_assigned)
print(xtable::xtable(phillips_assigned),
row.names = F)
print(xtable::xtable(phillips_assigned, row.names = F),
row.names = F)
print(xtable::xtable(phillips_assigned, rownames = F),
row.names = F)
print(xtable::xtable(phillips_assigned, rownames = F),
rownames = F)
>?print.xtable
library(xtable)
print(xtable(phillips_assigned, rownames = F),
rownames = F)
phillips_assigned
rownames(phillips_assigned) <- NULL
print(xtable(phillips_assigned, rownames = F),
rownames = F)
phillips_assigned <- phillips |>
select(name = `...6`, netid = `...5`) |>
mutate(name = gsub(",",", ",name)) |>
# Random sort
sample_frac(replace = F) |>
# Assign tables of 4
mutate(table = rep(1:ceiling(n() / 4), 4)[1:n()]) |>
# sort by last name
arrange(name) |>
write_csv("phillips_assigned_1.csv")
?print.xtable
print(xtable(phillips_assigned, rownames = F),
include.rownames = F)
print(xtable(phillips_assigned),
include.rownames = F)
max(phillips$table)
max(phillips_assigned$table)
nrow(upson_assigned)
nrow(upson_assigned) / 2
print(xtable(phillips_assigned[1:40,]),
include.rownames = F)
print(xtable(phillips_assigned[1:40,]),
include.rownames = F, comment = F)
print(xtable(phillips_assigned[1:40,] |> select(-netid)),
include.rownames = F, comment = F)
nrow(phillips_assigned)
phillips_assigned[1:40,] |>
bind_cols(phillips_assigned[41:nrow(phillips_assigned)])
phillips_assigned[1:40,]
phillips_assigned[1:40,] |>
bind_cols(phillips_assigned[41:nrow(phillips_assigned),])
phillips_assigned[41:nrow(phillips_assigned),]
nrow(phillips_assigned)
phillips_assigned |>
select(-netid) |>
mutate(mycol = rep(1:2,each = n() / 2)[1:n()])
phillips_assigned[1:36,] |>
bind_cols(phillips_assigned[38:72,])
phillips_assigned[1:36,] |>
bind_cols(phillips_assigned[38:73,])
nrow(phillips_assigned)
length(1:36)
phillips_assigned[1:37,] |>
bind_cols(phillips_assigned[38:73,])
phillips_assigned[1:37,] |>
bind_cols(rbind(phillips_assigned[38:73,],NA,NA))
phillips_assigned[1:37,] |>
select(-netid) |>
bind_cols(rbind(phillips_assigned[38:73,] |> select(-netid),c(NA,NA)))
nrow(phillips_assigned)
phillips_assigned[1:37,] |>
select(-netid) |>
bind_cols(rep("       ",37)) |>
bind_cols(rbind(phillips_assigned[38:73,] |>
select(-netid),c(NA,NA)))
nrow(upson_assigned)
print(xtable(upson_assigned[37:71,] |> select(-netid)),
include.rownames = F)
