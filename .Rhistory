crime_out <-
crime_data %>%
# Define synthetic control parameters
synthetic_control(outcome = rate, # outcome
unit = city_simple, # unit index in the panel data
time = year, # time index in the panel data
i_unit = "Los Angeles", # unit where the intervention occurred
i_time = 2020, # time period when the intervention occurred
generate_placebos=T # generate placebo synthetic controls (for inference)
) %>%
# Generate single predictor: violent crime rate
generate_predictor(#time_window = 2012:2021, # Lacey DA term start
crime_rate = mean(rate)) %>%
# Generate the fitted weights for the synthetic control
generate_weights(
#optimization_window = 2012:2021
) %>% # time to use in the optimization task
# Generate the synthetic control
generate_control()
crime_out %>% plot_trends(time_window = 2012:2021)
crime_out %>% grab_significance(time_window = 2012:2021)
crime_out %>% plot_trends(time_window = 2012:2021)
crime_data %>%
# Define synthetic control parameters
synthetic_control(outcome = rate, # outcome
unit = city_simple, # unit index in the panel data
time = year, # time index in the panel data
i_unit = "Los Angeles", # unit where the intervention occurred
i_time = 2020, # time period when the intervention occurred
generate_placebos=T # generate placebo synthetic controls (for inference)
)
mycontrol <-  crime_data %>%
# Define synthetic control parameters
synthetic_control(outcome = rate, # outcome
unit = city_simple, # unit index in the panel data
time = year, # time index in the panel data
i_unit = "Los Angeles", # unit where the intervention occurred
i_time = 2020, # time period when the intervention occurred
generate_placebos=T # generate placebo synthetic controls (for inference)
)
mycontrol
mycontrol |>
slice_head(n = 1) |>
unnest()
mycontrol |>
slice_head(n = 1)
mycontrol |>
slice_head(n = 1) |>
unnest(.outcome, .meta)
mycontrol |>
slice_head(n = 1) |>
unnest(.outcome, .meta)
mycontrol |>
filter(row_number() == 2) |>
unnest(.outcome, .meta)
mycontrol |>
filter(row_number() == 2)
mycontrol |>
filter(row_number() == 2) |>
unnest(.outcome, .meta)
mycontrol |>
filter(row_number() == 2) |>
unnest(.outcome, .meta)
mycontrol
synthetic_control()
?generate_predictor
crime_data %>%
# Define synthetic control parameters
synthetic_control(outcome = rate, # outcome
unit = city_simple, # unit index in the panel data
time = year, # time index in the panel data
i_unit = "Los Angeles", # unit where the intervention occurred
i_time = 2020, # time period when the intervention occurred
generate_placebos=T # generate placebo synthetic controls (for inference)
)
crime_data %>%
# Define synthetic control parameters
synthetic_control(outcome = rate, # outcome
unit = city_simple, # unit index in the panel data
time = year, # time index in the panel data
i_unit = "Los Angeles", # unit where the intervention occurred
i_time = 2020, # time period when the intervention occurred
generate_placebos=T # generate placebo synthetic controls (for inference)
) %>%
# Generate single predictor: violent crime rate
generate_predictor(#time_window = 2012:2021, # Lacey DA term start
crime_rate = mean(rate))
temp <-   crime_data %>%
# Define synthetic control parameters
synthetic_control(outcome = rate, # outcome
unit = city_simple, # unit index in the panel data
time = year, # time index in the panel data
i_unit = "Los Angeles", # unit where the intervention occurred
i_time = 2020, # time period when the intervention occurred
generate_placebos=T # generate placebo synthetic controls (for inference)
) %>%
# Generate single predictor: violent crime rate
generate_predictor(#time_window = 2012:2021, # Lacey DA term start
crime_rate = mean(rate))
temp[1,]$.predictors
temp[2,]$.predictors
temp[3,]$.predictors
temp[4,]$.predictors
temp
tail(temp)
temp
crime_data %>%
# Define synthetic control parameters
synthetic_control(outcome = rate, # outcome
unit = city_simple, # unit index in the panel data
time = year, # time index in the panel data
i_unit = "Los Angeles", # unit where the intervention occurred
i_time = 2020, # time period when the intervention occurred
generate_placebos=T # generate placebo synthetic controls (for inference)
)
crime_data %>%
# Define synthetic control parameters
synthetic_control(outcome = rate, # outcome
unit = city_simple, # unit index in the panel data
time = year, # time index in the panel data
i_unit = "Los Angeles", # unit where the intervention occurred
i_time = 2020, # time period when the intervention occurred
generate_placebos=T # generate placebo synthetic controls (for inference)
) %>%
# Generate single predictor: violent crime rate
generate_predictor(#time_window = 2012:2021, # Lacey DA term start
crime_rate = mean(rate))
crime_out <-
crime_data %>%
# Define synthetic control parameters
synthetic_control(outcome = rate, # outcome
unit = city_simple, # unit index in the panel data
time = year, # time index in the panel data
i_unit = "Los Angeles", # unit where the intervention occurred
i_time = 2020, # time period when the intervention occurred
generate_placebos=T # generate placebo synthetic controls (for inference)
) %>%
# Generate single predictor: violent crime rate
generate_predictor(#time_window = 2012:2021, # Lacey DA term start
crime_rate = mean(rate))
crime_out$.outcome[[1]]
crime_out$.predictors[[1]]
crime_out$.predictors[[2]]
crime_out$.outcomme[[2]]
crime_out$.outcome[[2]]
crime_out$.predictor[[2]]
crime_out$.predictors[[2]]
crime_out$.outcome[[2]]
crime_data %>%
# Define synthetic control parameters
synthetic_control(outcome = rate, # outcome
unit = city_simple, # unit index in the panel data
time = year, # time index in the panel data
i_unit = "Los Angeles", # unit where the intervention occurred
i_time = 2020, # time period when the intervention occurred
generate_placebos=T # generate placebo synthetic controls (for inference)
) %>%
# Generate single predictor: violent crime rate
generate_predictor(#time_window = 2012:2021, # Lacey DA term start
crime_rate = mean(rate)) %>%
# Generate the fitted weights for the synthetic control
generate_weights(
#optimization_window = 2012:2021
)
crime_out <-
crime_data %>%
# Define synthetic control parameters
synthetic_control(outcome = rate, # outcome
unit = city_simple, # unit index in the panel data
time = year, # time index in the panel data
i_unit = "Los Angeles", # unit where the intervention occurred
i_time = 2020, # time period when the intervention occurred
generate_placebos=T # generate placebo synthetic controls (for inference)
) %>%
# Generate single predictor: violent crime rate
generate_predictor(#time_window = 2012:2021, # Lacey DA term start
crime_rate = mean(rate)) %>%
# Generate the fitted weights for the synthetic control
generate_weights(
#optimization_window = 2012:2021
)
crime_out$.unit_weights
crime_out$.unit_weights[[1]]
crime_out$.unit_weights[[2]]
crime_out
crime_out$.unit_weights[[1]]
crime_out$.unit_weights[[1]] |> left_join(crime_out$.unit_weights[[1]] |> rename(weight_control = weight))
crime_out$.unit_weights[[1]] |> left_join(crime_out$.unit_weights[[1]] |> rename(weight_control = weight)) |> summarize(all_equal = all.equal(weight, weight_control))
crime_out$.unit_weights[[1]] |> left_join(crime_out$.unit_weights[[1]] |> rename(weight_control = weight)) |> summarize(all_equal = all.equal(weight, weight_control), sum = sum)
crime_out$.unit_weights[[1]] |> left_join(crime_out$.unit_weights[[1]] |> rename(weight_control = weight)) |> summarize_all(sum)
crime_out$.unit_weights[[1]] |> left_join(crime_out$.unit_weights[[1]] |> rename(weight_control = weight)) |> summarize_all(.funs = sum)
crime_out$.unit_weights[[1]] |> left_join(crime_out$.unit_weights[[1]] |> rename(weight_control = weight)) |> select(is.numeric) |> summarize_all(.funs = sum)
crime_out$.unit_weights[[1]] |> left_join(crime_out$.unit_weights[[1]] |> rename(weight_control = weight)) |> select(-city) |> summarize_all(.funs = sum)
crime_out$.unit_weights[[1]] |> left_join(crime_out$.unit_weights[[1]] |> rename(weight_control = weight))
crime_out$.unit_weights[[1]] |> left_join(crime_out$.unit_weights[[1]] |> rename(weight_control = weight)) |> select(-unit) |> summarize_all(sum)
crime_out <-
crime_data %>%
# Define synthetic control parameters
synthetic_control(outcome = rate, # outcome
unit = city_simple, # unit index in the panel data
time = year, # time index in the panel data
i_unit = "Los Angeles", # unit where the intervention occurred
i_time = 2020, # time period when the intervention occurred
generate_placebos=T # generate placebo synthetic controls (for inference)
) %>%
# Generate single predictor: violent crime rate
generate_predictor(#time_window = 2012:2021, # Lacey DA term start
crime_rate = mean(rate)) %>%
# Generate the fitted weights for the synthetic control
generate_weights(
#optimization_window = 2012:2021
) %>% # time to use in the optimization task
# Generate the synthetic control
generate_control()
crime_out
crime_out$.synthetic_control[[1]]
?generate_predictor
?fill_down
library(tidymodels)
setwd("~/Dropbox/info3370_sp24/pset_solutions")
# Load the learning set data
learning <- read_csv("for_students/learning.csv")
# Split into train and test
split <- initial_split(learning, prop = .5)
lm(g3_log_income ~ g2_log_income + g1_log_income, data = training(split))
rpart(
g3_log_income ~ g2_log_income + g1_log_income,
data = training(split)
)
library(rpart)
fits <- list(
no_model = lm(
g3_log_income ~ 1,
data = training(split)
),
linear_model = lm(
g3_log_income ~ g2_log_income + g1_log_income,
data = training(split)
),
tree_model = rpart(
g3_log_income ~ g2_log_income + g1_log_income,
data = training(split)
)
)
fits
testing(split) |>
mutate(
no_model = predict(fits$no_model, newdata = testing(split)),
linear_model = predict(fits$linear_model, newdata = testing(split)),
tree_model = predict(fits$tree_model, newdata = testing(split))
)
testing(split) |>
mutate(
no_model = predict(fits$no_model, newdata = testing(split)),
linear_model = predict(fits$linear_model, newdata = testing(split)),
tree_model = predict(fits$tree_model, newdata = testing(split))
) |>
select(g3_log_income, no_model, linear_model, tree_model) |>
rename(y = g3_log_income)
testing(split) |>
mutate(
no_model = predict(fits$no_model, newdata = testing(split)),
linear_model = predict(fits$linear_model, newdata = testing(split)),
tree_model = predict(fits$tree_model, newdata = testing(split))
) |>
select(g3_log_income, no_model, linear_model, tree_model) |>
rename(y = g3_log_income) |>
pivot_longer(
cols = -y,
names_to = "model",
values_to = "yhat"
) |>
group_by(model) |>
mutate(
error = y - yhat,
squared_error = error ^ 2
) |>
summarize(mse = mean(squared_error))
testing(split) |>
mutate(
no_model = predict(fits$no_model, newdata = testing(split)),
linear_model = predict(fits$linear_model, newdata = testing(split)),
tree_model = predict(fits$tree_model, newdata = testing(split))
) |>
select(g3_log_income, no_model, linear_model, tree_model) |>
rename(y = g3_log_income) |>
pivot_longer(
cols = -y,
names_to = "model",
values_to = "yhat"
) |>
group_by(model) |>
mutate(
error = y - yhat,
squared_error = error ^ 2
) |>
summarize(mse = mean(squared_error)) |>
arrange(mse)
testing(split) |>
mutate(
no_model = predict(fits$no_model, newdata = testing(split)),
linear_model = predict(fits$linear_model, newdata = testing(split)),
tree_model = predict(fits$tree_model, newdata = testing(split))
) |>
select(g3_log_income, no_model, linear_model, tree_model) |>
rename(y = g3_log_income) |>
pivot_longer(
cols = -y,
names_to = "model",
values_to = "yhat"
) |>
group_by(model) |>
mutate(
error = y - yhat,
squared_error = error ^ 2
) |>
summarize(mse = mean(squared_error)) |>
arrange(-mse)
mse <- testing(split) |>
mutate(
no_model = predict(fits$no_model, newdata = testing(split)),
linear_model = predict(fits$linear_model, newdata = testing(split)),
tree_model = predict(fits$tree_model, newdata = testing(split))
) |>
select(g3_log_income, no_model, linear_model, tree_model) |>
rename(y = g3_log_income) |>
pivot_longer(
cols = -y,
names_to = "model",
values_to = "yhat"
) |>
group_by(model) |>
mutate(
error = y - yhat,
squared_error = error ^ 2
) |>
summarize(mse = mean(squared_error)) |>
arrange(-mse) |>
print()
?regression_forest
library(grf)
?regression_forest
mse |> pivot_wider(names_from = "model")
# Not required: Calculate percentage changes in MSE
pct_changes <- mse |>
pivot_wider(names_from = "model", values_from = "mse") |>
print()
# Not required: Calculate percentage changes in MSE
pct_changes <- mse |>
pivot_wider(names_from = "model", values_from = "mse") |>
mutate(
none_to_stats = (linear_model - no_model) / no_model,
stats_to_ml = (tree_model - linear_model) / linear_model
) |>
print()
label_percent()(pct_changes$none_to_stats)
fits <- list(
no_model = lm(
g3_log_income ~ 1,
data = training(split)
),
linear_model = lm(
g3_log_income ~ g2_log_income + g1_log_income,
data = training(split)
),
#tree_model = rpart(
#  g3_log_income ~ g2_log_income + g1_log_income,
#  data = training(split)
#),
tree_model = gam(
g3_log_income ~ s(g2_log_income) + s(g1_log_income),
data = training(split)
)
)
library(mgcv)
fits <- list(
no_model = lm(
g3_log_income ~ 1,
data = training(split)
),
linear_model = lm(
g3_log_income ~ g2_log_income + g1_log_income,
data = training(split)
),
#tree_model = rpart(
#  g3_log_income ~ g2_log_income + g1_log_income,
#  data = training(split)
#),
tree_model = gam(
g3_log_income ~ s(g2_log_income) + s(g1_log_income),
data = training(split)
)
)
mse <- testing(split) |>
mutate(
no_model = predict(fits$no_model, newdata = testing(split)),
linear_model = predict(fits$linear_model, newdata = testing(split)),
tree_model = predict(fits$tree_model, newdata = testing(split))
) |>
select(g3_log_income, no_model, linear_model, tree_model) |>
rename(y = g3_log_income) |>
pivot_longer(
cols = -y,
names_to = "model",
values_to = "yhat"
) |>
group_by(model) |>
mutate(
error = y - yhat,
squared_error = error ^ 2
) |>
summarize(mse = mean(squared_error)) |>
arrange(-mse) |>
print()
data <- read_dta("../data_raw/cps_00077.dta")
setwd("~/Dropbox/github/info3370.github.io")
setwd("~/Dropbox/github/info3370.github.io/topics")
library(tidyverse)
library(haven)
library(scales)
library(rsample)
data <- read_dta("../data_raw/cps_00077.dta")
aggregated <- data |>
group_by(sex)
atus <- read_dta("../data_raw/atus_00014.dta")
aggregated <- atus |>
filter(age >= 25 & age <= 50) |>
filter(marst == 1) |>
group_by(age, sex) |>
summarize(housework = weighted.mean(bls_hhact_hwork, w = wt06),
paidwork = weighted.mean(bls_work_working, w = wt06))
aggregated |>
mutate_if(is.labelled, as_factor) |>
ggplot(aes(x = age, y = housework, color = sex)) +
geom_point() +
geom_smooth(method = "lm", se = F)
d <- read_dta("../data_raw/cps_00081.dta")
# What is the mean income of those who work 37 hours per week?
aggregated <- d |>
filter(uhrsworkly != 999) |>
filter(incwage > 0 & incwage < 99999998) |>
filter(uhrsworkly <= 60) |>
group_by(uhrsworkly) |>
summarize(
incwage = weighted.mean(incwage, w = asecwt),
num = n()
) |>
mutate(target = uhrsworkly == 37) |>
rename(y = incwage, x = uhrsworkly)
p <- aggregated |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(color = target)) +
scale_x_continuous(name = "Hours Worked Per Week") +
scale_y_continuous(
name = "Mean Annual Wage and Salary Income",
labels = label_dollar(),
limits = c(0,125e3)
) +
scale_color_manual(values = c("darkgray","blue")) +
theme(legend.position = "none")
p
p + geom_line()
p + geom_smooth(method = "lm", se = F)
p + geom_smooth(method = "gam", se = F)
# Train test split
split <- aggregated |>
initial_split(prop = .5)
train <- training(split)
test <- testing(split)
# OLS
fit <- lm(y ~ x, data = train)
test |>
mutate(
predicted = predict(fit, newdata = test),
error = y - predicted,
squared_error = error ^ 2
) |>
summarize(
root_mean_squared_error = sqrt(mean(squared_error))
)
# LOESS
fit <- loess(y ~ x, data = train)
fitted <- test |>
mutate(
predicted = predict(fit, newdata = test),
error = y - predicted,
squared_error = error ^ 2
)
fitted |>
ggplot(aes(x = x, y = predicted)) +
geom_line()
fitted |>
summarize(
root_mean_squared_error = sqrt(mean(squared_error))
)
# TREE
fit <- rpart::rpart(y ~ x, data = train)
fitted <- test |>
mutate(
predicted = predict(fit, newdata = test),
error = y - predicted,
squared_error = error ^ 2
)
fitted |>
ggplot(aes(x = x, y = predicted)) +
geom_step() +
geom_point()
?summarize
library(tidyverse)
?summarize
?summaruze
?summarize
